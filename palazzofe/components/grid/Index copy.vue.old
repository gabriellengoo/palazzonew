<template>
  <client-only>
 

    <div
      v-masonry
      column-width=".item"
      item-selector=".item"
      class="w-full image-grid masonry"
      :class="size"
      horizontal-order="true"
    >
      <div
        v-masonry-tile
        class="allsvga relative image-item transition-opacity duration-300 item"
        v-for="item in items"
        :key="item._key"
        :class="[
          item.double ? 'double h-fit' : '',
          item.spacer != 0 ? 'p-2' : '',
          item.image.image || item.video.id ? '' : 'hidden md:block',
          // mobile test?
          item.double && size == 'small' ? '' : '',
          activeTalent &&
          activeTalent != item.reference.talentId &&
          activeTalent != item.reference
            ? ''
            : '',
        ]"
      >
      
        <figure
          class="flex flex-col"
          :style="{
            minHeight: item.video.id ? (isDesktop ? '45vh' : '15vh') : 'auto',
          }"
          :class="[
            item.spacer
              ? `h-space-${item.spacer + 1}  md:h-space-${item.spacer}`
              : item.image.aspect >= 1
              ? item.double
                ? 'h-space-10 md:h-space-10 2xl:h-space-10'
                : 'h-space-5 md:h-space-3 2xl:h-space-2'
              : item.double
              ? 'h-space-fit md:h-space-fit 2xl:h-space-fit'
              : 'h-space-12 md:h-space-6 2xl:h-space-4',
            // mb-6 redundent
            size == 'small' ? '' : '',
          ]"
        >
          <!-- <div> -->
          <div class="relative">
            <div>
              <img src="/archframe.png" alt="Arch Frame" class="arch-frame" />

              <!--   class="inner-image" -->
              <NuxtLink
                :class="[
                  containerClass,
                  item.image.position == 'right'
                    ? 'items-end'
                    : item.image.position == 'center'
                    ? 'items-center'
                    : 'items-start',
                ]"
                v-if="item.reference.slug"
                :to="`/work/${item.reference.slug}`"
                @mouseenter="hover(item)"
                @mouseleave="leave()"
              >
                <span
                  class="flex flex-col items-start h-full max-w-full"
                  :class="size == 'small' ? 'w-full' : 'w-auto'"
                >
                  <!-- square-rounded -->
                  <figure
                    class="figsvgall inner-image"
                    :class="size == 'small' ? 'block w-full' : 'h-full w-auto'"
                    :style="
                      item.video && item.video.aspect && size == 'small'
                        ? `aspect-ratio: ${item.video.aspect.replace(':', '/')}`
                        : ''
                    "
                  >
                    <!-- filled image svg here -->
                    <div class="svgall relative svg-container">
                      <!-- SVG as background -->
                      <svg
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                        class="svg-background"
                      >
                        <!-- <path d="M154.5 0.0117052C40.9 1.21171 4.16667 91.1784 0 136.012V477.512H313.5V136.012C307.833 90.1784 268.1 -1.18829 154.5 0.0117052Z" fill="none"/> -->
                      </svg>

                      <!-- Image overlay -->
                      <MediaImage
                        :src="item.image.image"
                        v-if="item.image.image"
                        class="overlay-image hover-show-right"
                      />
                    </div>

                    <!-- <MediaImage
                  :size="item.image.size"
                  :aspect="item.image.aspect"
                  :src="item.image.image"
                  v-if="item.image.image"
                  class="contain-image"
                  :sizes="
                    size == 'sm' ? 'sm:60vw md:150vw' : 'sm:150vw md:150vw'
                  "
                ></MediaImage> -->
                    <!-- :style="{ backgroundColor: item.double ? 'red' : 'blue', }"  -->
                    <!-- <MediaVideo 
                  :id="item.video.id"
                  :thumbTime="item.video.thumbTime"                 
     v-if="item.video.id"
                  class="dubvid object-contain object-top w-auto h-full"
                  
                ></MediaVideo> -->
                  </figure>
                  <figcaption
                    class="block text-center uppercase w-full pt-2 pb-1 mr-auto text-xs"
                    v-if="size == 'small'"
                  >
                    <span v-if="item.title">{{ item.title }}</span>
                    <span v-else>{{ item.reference.title }}</span>
                  </figcaption>
                  <figcaption
                    class="block text-center uppercase w-full pt-0 mr-auto text-xs"
                    v-if="size == 'small'"
                  >
                    <span v-if="item.year">{{ item.year }}</span>
                    <span v-else>{{ item.reference.year }}</span>
                  </figcaption>
                </span>
              </NuxtLink>
              <a
                v-else-if="item.link"
                :href="item.link"
                target="_blank"
                :class="[
                  containerClass,
                  item.image.position == 'right'
                    ? 'items-end'
                    : item.image.position == 'center'
                    ? 'items-center'
                    : 'items-start',
                ]"
                @mouseenter="
                  item.reference.title
                    ? SET_ACTIVE_PROJECT(item.reference)
                    : SET_ACTIVE_PROJECT(item._key)
                "
                @mouseleave="SET_ACTIVE_PROJECT(false)"
              >
                <span
                  class="flex flex-col items-start w-auto h-full max-w-full"
                >
                  <!-- <MediaImage
                :size="item.image.size"
                :aspect="item.image.aspect"
                :src="item.image.image"
                v-if="item.image.image"
                class="contain-image"
               
              ></MediaImage> -->

                  <!-- <MediaVideo
                :id="item.video.id"
                :style="`aspect-ratio: ${item.video.aspect.replace(':', '/')}`"
                v-if="item.video.id"
                :thumbTime="item.video.thumbTime"
                class="object-contain object-top w-auto h-full"
              ></MediaVideo> -->
                  <figcaption
                    class="block py-2 mr-auto text-xs"
                    v-if="size == 'small'"
                  >
                    <span v-if="item.title">{{ item.title }}</span>
                    <span v-else>{{ item.reference.title }}</span>
                  </figcaption>
                </span>
              </a>
              <figure
                v-else
                :class="[
                  containerClass,
                  item.image.position == 'right'
                    ? 'items-end'
                    : item.image.position == 'center'
                    ? 'items-center'
                    : 'items-start',
                ]"
              >
                <span
                  class="flex flex-col items-start w-auto h-full max-w-full"
                >
                  <MediaImage
                    :size="item.image.size"
                    :aspect="item.image.aspect"
                    :src="item.image.image"
                    v-if="item.image.image"
                    :class="imageClass"
                  ></MediaImage>
                  <!-- <MediaVideo
                :id="item.video.id"
                :style="`aspect-ratio: ${item.video.aspect.replace(':', '/')}`"
                v-if="item.video.id"
                :thumbTime="item.video.thumbTime"
                class="object-contain object-top w-auto h-full"
              ></MediaVideo> -->
                  <figcaption
                    class="block py-2 mr-auto text-xs"
                    v-if="size == 'small'"
                  >
                    <span v-if="item.title">{{ item.title }}</span>
                    <span v-else>{{ item.reference.title }}</span>
                  </figcaption>
                </span>
              </figure>
            </div>
          </div>
          <!-- </div> -->
        </figure>
      </div>
    </div>
  </client-only>
</template>
<script>
import { mapMutations, mapState } from "vuex";
export default {
  props: ["items", "size"],
  data() {
    return {
      project: false,
      containerClass: "flex flex-col w-full h-full",
      imageClass: "contain-image",
      isDesktop: false,
    };
  },
  computed: {
    ...mapState(["activeProject", "activeTalent"]),
  },
  mounted() {
    this.redraw();
    // Check if the window width is greater than a certain threshold for desktop
    this.isDesktop = window.innerWidth > 768; // Adjust the threshold as needed
    // Listen to window resize events to update the isDesktop flag
    window.addEventListener("resize", this.handleResize);
  },
  beforeDestroy() {
    // Remove the resize event listener when the component is destroyed
    window.removeEventListener("resize", this.handleResize);
  },

  methods: {
    ...mapMutations(["SET_ACTIVE_PROJECT", "SET_ACTIVE_TALENT"]),

    hover() {
      const image = document.querySelector(".hover-show-right");
      if (image) {
        image.classList.add("show-on-right");
      }
    },
    leave() {
      const image = document.querySelector(".hover-show-right");
      if (image) {
        image.classList.remove("show-on-right");
      }
    },

    redraw() {
      if (typeof this.$redrawVueMasonry === "function") {
        this.$redrawVueMasonry();
      }
    },
    beforeDestroy() {
      // Remove the resize event listener when the component is destroyed
      window.removeEventListener("resize", this.handleResize);
    },
    hover(item) {
   const image = document.querySelector(".hover-show-right");
   if (image) {
     image.classList.add("show-on-right");
   }
},
leave() {
   const image = document.querySelector(".hover-show-right");
   if (image) {
     image.classList.remove("show-on-right");
   }
}
  },
};
</script>
<style scoped>
/* Default styling */
.overlay-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease, right 0.3s ease;
}

/* Show the image on the right when hovered */
.show-on-right {
  position: fixed;
  top: 50%;
  right: 0;
  width: 50%; /* Adjust as needed */
  transform: translateY(-50%);
}

/* .allsvga{
  width: 20vw;
} */
a {
  z-index: 10000000 !important;
}
.image-item {
  position: relative;
  flex: 0 0 calc(50% - 20px);
  /* flex: 0 1 auto; */
  margin-bottom: 20px;
  padding: 2vw;
}

.arch-frame {
  width: 100%;
  height: auto;
  object-fit: cover;
  border-radius: 10px; /* Optional: Add rounded corners to images */
  position: relative;
  z-index: 1;
  opacity: 0.2;
}

/* .inner-image {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 90%; 
  height: auto;
  object-fit: contain;
  transform: translate(-50%, -50%); 
  z-index: 2; 
} */

/* .inner-image img {
    position: relative;
    top: -2.5vh;
    display: flex;
    width: 100vw;
    align-items: center;
} */

.svg-container {
  position: relative;
  width: 100%; /* Adjust as needed */
  height: 0;
  padding-top: 150%; /* Aspect ratio of SVG (height/width * 100%) */
}

.svg-background {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.overlay-image {
  position: absolute;
  top: 0;
  left: 0;
  /* left: .5vw; */
  width: 100%;
  height: 100%;
  object-fit: cover; /* Ensures image covers the SVG area without distortion */
  clip-path: path(
    "m155.5,1.01171c-113.6,1.2,-150.333,91.167,-154.5,136v341.5h313.5v-341.5c-5.667,-45.833,-45.4,-137.2,-159,-136z"
  );
  /* clip-path: path('M 0 200 L 0,75 A 5,5 0,0,1 150,75 L 200 200 z'); */
}

@media (max-width: 1440px) {
  .overlay-image {
    clip-path: path(
      "m111.885,1.00841c-81.531,0.862,-107.895,65.486,-110.885,97.69v245.302h225v-245.302c-4.067,-32.923,-32.584,-98.552,-114.115,-97.69z"
    );
  }

  .image-item {
    position: relative;
    flex: 0 0 calc(50% - 20px);
    /* flex: 0 1 auto; */
    margin-bottom: 20px;
    padding: 2vw;
  }

  .image-grid {
    display: grid !important;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 20px;
    gap: 20px;
  }

  .figsvgall {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 90%;
    height: auto;
    -o-object-fit: contain;
    object-fit: contain;
    transform: translate(-50%, -50%);
    transform: translate(-48%, -54%) !important;
  }
}

@media (max-width: 1024px) {
  .overlay-image {
    clip-path: path(
      "m78.3732,1.00586c-56.891,0.601,-75.287,45.63,-77.373,68.07v170.924h157v-170.924c-2.838,-22.941,-22.736,-68.671,-79.627,-68.07z"
    );
    /* clip-path: path("m155.5,1.01171c-113.6,1.2,-150.333,91.167,-154.5,136v341.5h313.5v-341.5c-5.667,-45.833,-45.4,-137.2,-159,-136z"); */
  }

  /* .image-item {
  position: relative;
  flex: 0 1 auto;
  margin-bottom: 20px;
  padding: 2vw;
} */
  .figsvgall {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 90%;
    height: auto;
    -o-object-fit: contain;
    object-fit: contain;
    transform: translate(-50%, -50%);
    transform: translate(-50%, -59%) !important;
  }
}

@media (max-width: 768px) {
  .overlay-image {
    /* clip-path: path("m111.885,1.00841c-81.531,0.862,-107.895,65.486,-110.885,97.69v245.302h225v-245.302c-4.067,-32.923,-32.584,-98.552,-114.115,-97.69z") !important; */
    clip-path: path(
      "m111.885,1.00841c-81.531,0.862,-107.895,65.486,-110.885,97.69v245.302h225v-245.302c-4.067,-32.923,-32.584,-98.552,-114.115,-97.69z"
    );
  }
  .image-item {
    position: relative;
    /* flex: 0 0 calc(50% - 20px); */
    flex: 0 1 auto;
    margin-bottom: 20px;
    padding: 2vw;
  }
  .image-grid {
    display: flex !important;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 20px;
    gap: 20px;
    justify-content: center;
  }

  .svg-container {
    transform: scale(1.2);
  }

  .figsvgall {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 90%;
    height: auto;
    -o-object-fit: contain;
    object-fit: contain;
    transform: translate(-50%, -50%);
    transform: translate(-34%, -39%) !important;
  }
}

@media (max-width: 425px) {
  .overlay-image {
    /* clip-path: path("m111.885,1.00841c-81.531,0.862,-107.895,65.486,-110.885,97.69v245.302h225v-245.302c-4.067,-32.923,-32.584,-98.552,-114.115,-97.69z") !important; */
    clip-path: path(
      "m111.885,1.00841c-81.531,0.862,-107.895,65.486,-110.885,97.69v245.302h225v-245.302c-4.067,-32.923,-32.584,-98.552,-114.115,-97.69z"
    );
  }
  .image-item {
    position: relative;
    /* flex: 0 0 calc(50% - 20px); */
    flex: 0 1 auto;
    margin-bottom: 20px;
    padding: 2vw;
  }
  .image-grid {
    display: flex !important;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 20px;
    gap: 20px;
    justify-content: center;
  }
}

@media (max-width: 1902px) {
  .overlay-image {
    /* clip-path: path("m111.885,1.00841c-81.531,0.862,-107.895,65.486,-110.885,97.69v245.302h225v-245.302c-4.067,-32.923,-32.584,-98.552,-114.115,-97.69z"); */
    /* clip-path: path("m155.5,1.01171c-113.6,1.2,-150.333,91.167,-154.5,136v341.5h313.5v-341.5c-5.667,-45.833,-45.4,-137.2,-159,-136z"); */
  }
  .image-item {
    position: relative;
    /* flex: 0 0 calc(50% - 20px); */
    flex: 0 1 auto;
    margin-bottom: 20px;
    padding: 2vw;
  }
}

/* 1902 */

.figsvgall {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 90%;
  height: auto;
  object-fit: contain;
  transform: translate(-50%, -50%);
  transform: translate(-50%, -54%);
}

/* <svg width="315" height="480" viewBox="0 0 315 480" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M155.5 1.01171C41.9 2.21171 5.16667 92.1784 1 137.012V478.512H314.5V137.012C308.833 91.1784 269.1 -0.188295 155.5 1.01171Z" stroke="black"/>
</svg> */

/* @media (max-width: 1440px) {
  .overlay-image {
    clip-path: m154.5 0c-113.6 1.2-150.3 91.2-154.5 135.999v341.5h313.5v-341.5c-5.7-45.8-45.4-136.2-159-135.99z
    ;
  }} */

/* Styles for text inside the frame */
.textframe {
  /* text-align: center; */
  /* position: absolute; */
  /* bottom: 10%;
  left: 0;
  width: 100%; */
  z-index: 3; /* Ensure text appears on top */
}

.subtext {
  font-family: "RomainHeadlineTrial";
}

.image-grid {
  /* display: flex;
  flex-wrap: wrap;
  justify-content: space-between; */
  /* Ensures the images have equal spacing */
  /* gap: 20px;  */
  /* Adjust the gap between images */
}

.image-item {
  /* margin-bottom: 20px;
  padding: 2vw;
  box-sizing: border-box;  */
  /* Ensures padding is included in the width calculation */
}

.image-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr); /* Create 2 equal columns */
  gap: 20px; /* Adjust the gap between grid items */
}

.image-item {
  position: relative;
  overflow: hidden; /* Hide any overflow */
  display: flex;
  justify-content: center;
  align-items: center;
  /* width: 20vw; */
}

/* Add a bottom border after every two images */
.image-item:nth-child(1n) {
  border-bottom: 0.5px solid #000000; /* Adjust color and thickness */
  margin-bottom: 40px; /* Add space after the border */
}

.square-rounded {
  width: 200px;
  height: 350px;
  border-radius: 100px 100px 0 0;
  overflow: hidden; /* Ensures children elements don't overflow the rounded corners */
  position: relative; /* Required for absolute positioning of children */
}

.square-rounded img {
  width: 100%;
  height: 100%;
  object-fit: cover; /* Ensures the image covers the container while maintaining aspect ratio */
  position: absolute;
  top: 0;
  left: 0;
}

/* @media (min-width: 768px){
  .masonry.large .item.double {
    height: 55vh;

}
} */

/* .masonry .item {
  width: calc(20vw - 10px);
  width: 25vw;
} */
</style>
